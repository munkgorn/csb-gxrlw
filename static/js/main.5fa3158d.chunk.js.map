{"version":3,"sources":["page/Profile.js","App.js","serviceWorker.js","index.js"],"names":["Profile","react_default","a","createElement","card","style","row","gutter","col","span","Header","Layout","Content","Footer","App","menus","name","path","layout","className","menu","theme","mode","defaultSelectedKeys","map","m","i","react_router_dom","to","Item","key","padding","react_router","exact","component","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gSAqBeA,EAlBC,WACd,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,MAAO,CAAEA,MAAO,SACpBJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAKC,OAAQ,CAAC,GAAI,KAChBN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAKC,KAAM,GACTR,EAAAC,EAAAC,cAACC,EAAA,EAAD,eAEFH,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAKC,KAAM,GACTR,EAAAC,EAAAC,cAACC,EAAA,EAAD,mBAEFH,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAKC,KAAM,IACTR,EAAAC,EAAAC,cAACC,EAAA,EAAD,mBCRFM,EAA4BC,IAA5BD,OAAQE,EAAoBD,IAApBC,QAASC,EAAWF,IAAXE,OAuCVC,MArCf,WACE,IAAIC,EAAQ,CAAC,CAAEC,KAAM,UAAWC,KAAM,MAEtC,OACEhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAQC,UAAU,UAChBlB,EAAAC,EAAAC,cAACO,EAAD,KACET,EAAAC,EAAAC,cAAA,OAAKgB,UAAU,SACflB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAMC,MAAM,OAAOC,KAAK,aAAaC,oBAAqB,CAAC,MACxDR,GACCA,EAAMS,IAAI,SAACC,EAAGC,GAAJ,OACRzB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAMC,GAAIH,EAAER,MACVhB,EAAAC,EAAAC,cAACiB,EAAA,EAAKS,KAAN,CAAWC,IAAKJ,GAAID,EAAET,WAKhCf,EAAAC,EAAAC,cAACS,EAAD,CAASP,MAAO,CAAE0B,QAAS,MACzB9B,EAAAC,EAAAC,cAAA,OAAKgB,UAAU,uBACblB,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,KACGjB,GACCA,EAAMS,IAAI,SAACC,EAAGC,GAAJ,OACRzB,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CACEC,MAAkB,MAAXR,EAAER,KACTA,KAAMQ,EAAER,KACRiB,UAAWlC,SAMvBC,EAAAC,EAAAC,cAACU,EAAD,CAAQR,MAAO,CAAE8B,UAAW,WAA5B,4CC1BcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwB,EAAA,EAAD,KAAQ1B,EAAAC,EAAAC,cAACwC,EAAD,OAAkBC,SAASC,eAAe,SDyH5D,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5fa3158d.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card, Row, Col } from \"antd\";\n\nconst Profile = () => {\n  return (\n    <Card style={{ style: \"100%\" }}>\n      <Row gutter={[14, 14]}>\n        <Col span={6}>\n          <Card>Items</Card>\n        </Col>\n        <Col span={6}>\n          <Card>Charactor</Card>\n        </Col>\n        <Col span={12}>\n          <Card>Status</Card>\n        </Col>\n      </Row>\n    </Card>\n  );\n};\n\nexport default Profile;\n","import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { Layout, Menu, Breadcrumb } from \"antd\";\nimport \"./App.css\";\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport Profile from \"./page/Profile\";\nconst { Header, Content, Footer } = Layout;\n\nfunction App() {\n  let menus = [{ name: \"MG Game\", path: \"/\" }];\n\n  return (\n    <Layout className=\"layout\">\n      <Header>\n        <div className=\"logo\" />\n        <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={[\"2\"]}>\n          {menus &&\n            menus.map((m, i) => (\n              <Link to={m.path}>\n                <Menu.Item key={i}>{m.name}</Menu.Item>\n              </Link>\n            ))}\n        </Menu>\n      </Header>\n      <Content style={{ padding: \"0\" }}>\n        <div className=\"site-layout-content\">\n          <Switch>\n            {menus &&\n              menus.map((m, i) => (\n                <Route\n                  exact={m.path === \"/\"}\n                  path={m.path}\n                  component={Profile}\n                />\n              ))}\n          </Switch>\n        </div>\n      </Content>\n      <Footer style={{ textAlign: \"center\" }}>\n        Ant Design Â©2018 Created by Ant UED\n      </Footer>\n    </Layout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'antd/dist/antd.css'; // or 'antd/dist/antd.less'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(<Router><App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}